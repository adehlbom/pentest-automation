import tkinter as tk
from tkinter import Entry, Label, Button, Text, Scrollbar
import subprocess
from threading import Thread

def update_output(process):
    while True:
        output = process.stdout.readline().decode()
        if output == '' and process.poll() is not None:
            break
        if output:
            text.insert(tk.END, output)
            window.update_idletasks()

def run_scan(script_name, scan_name):
    active_scan_label.config(text=f"Active Scan: {scan_name}")
    target_ip = ip_entry.get()
    process = subprocess.Popen(['bash', f'pentest-automation/initial-scanning/{script_name}.sh', target_ip],
                               stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)
    Thread(target=update_output, args=(process,)).start()

# Create the main window
window = tk.Tk()
window.title("Pentesting Automation")

# Create a label and entry for the IP address
ip_label = Label(window, text="Target IP:")
ip_label.pack()
ip_entry = Entry(window)
ip_entry.pack()

# Create a label to display the active scan
active_scan_label = Label(window, text="Active Scan: None")
active_scan_label.pack()

# Create buttons to start the different scans
initial_tcp_scan_button = Button(window, text="Run Initial TCP Scan",
                                 command=lambda: run_scan('initial-tcp-scan', 'Initial TCP Scan'))
initial_tcp_scan_button.pack()

full_tcp_scan_button = Button(window, text="Run Full TCP Scan",
                              command=lambda: run_scan('full-tcp-scan', 'Full TCP Scan'))
full_tcp_scan_button.pack()
vuln_scan_button = Button(window, text="Run Vulnerability Scan",
                          command=lambda: run_scan('vuln-scan', 'Vulnerability Scan'))
vuln_scan_button.pack()


# ... (similar button definitions for other scans) ...

# Create a text widget to display the scan output
text = Text(window, wrap='word')
text.pack()

# Run the Tkinter event loop
window.mainloop()
