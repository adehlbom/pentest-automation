import tkinter as tk
from tkinter import Entry, Label, Button, Text, Scrollbar, ttk
import subprocess
from threading import Thread

def update_output(process):
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            text.insert(tk.END, output)
            window.update_idletasks()

def extract_info(filename):
    result = []
    number = 1  # Initialize a counter
    with open(filename, 'r') as file:
        for line in file:
            parts = line.strip().split()
            if len(parts) >= 5:
                protocol = parts[0].split('/')[1]
                port = parts[0].split('/')[0]
                status = parts[1]
                service = parts[2]
                version = ' '.join(parts[3:])
                result.append((number, protocol, port, status, service, version))
                number += 1  # Increment the counter for the next entry
    return result


def run_scan(script_name, scan_label):
    text.delete(1.0, "end")

    target_ip = ip_entry.get()
    ping_response = subprocess.call(["ping", "-c", "1", "-W", "1", target_ip])
    if ping_response == 0:
        active_scan_label.config(text=f"Active Scan: {scan_label}")

        canvas.itemconfig(ball, fill='green')  # Change color to green
        process = subprocess.Popen(['bash', f'./initial-scanning/{script_name}.sh', target_ip],
                                   stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        Thread(target=update_output, args=(process,)).start()
        extract_info('./processed_output.txt')
    else:
        print(f"Failed to reach {target_ip}. Stopping the scan.")
        canvas.itemconfig(ball, fill='red')  # Change color to green

# Create the main window
window = tk.Tk()
window.title("Pentesting Automation")

# Create a Treeview widget for the table
table = ttk.Treeview(window, columns=("Protocol", "Port", "State", "Service", "Version"))
table.heading("#0", text="Number")
table.heading("#1", text="Protocol")
table.heading("#2", text="Port")
table.heading("#3", text="State")
table.heading("#4", text="Service")
table.heading("#5", text="Version")

table.pack(anchor='nw')  # anchor='nw' positions the label at the top left
# Create a label to display the active scan
active_scan_label = Label(window, text="Active Scan: None")
active_scan_label.pack()
# Create a label and entry for the IP address
ip_label = Label(window, text="Target IP:")
ip_label.pack()
ip_entry = Entry(window)
ip_entry.pack()


canvas = tk.Canvas(window, width=20, height=20)
canvas.pack()
ball = canvas.create_oval(5, 5, 15, 15, fill='grey')  # initially red



# Create buttons to start the different scans
initial_tcp_scan_button = Button(window, text="Run Initial TCP Scan",
                                 command=lambda: run_scan('initial-tcp-scan', 'Initial TCP Scan'))
initial_tcp_scan_button.pack()

full_tcp_scan_button = Button(window, text="Run Full TCP Scan",
                              command=lambda: run_scan('full-tcp-scan', 'Full TCP Scan'))
full_tcp_scan_button.pack()
vuln_scan_button = Button(window, text="Run Vulnerability Scan",
                          command=lambda: run_scan('vuln-scan', 'Vulnerability Scan'))
vuln_scan_button.pack()


# Create a text widget to display the scan output
text = Text(window, wrap='word')
text.pack()

# Run the Tkinter event loop
window.mainloop()
